@page "/orders/edit"
@using Microsoft.EntityFrameworkCore
@using DataAcess2
@inject IDbContextFactory<SengWebProject.Data.SengWebProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Order</h2>
<hr />
@if (Order is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Order" OnValidSubmit="UpdateOrder" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Order.OrderID" value="@Order.OrderID" />
                <div class="mb-3">
                    <label for="customerid" class="form-label">CustomerID:</label>
                    <InputNumber id="customerid" @bind-Value="Order.CustomerID" class="form-control" />
                    <ValidationMessage For="() => Order.CustomerID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="employeeid" class="form-label">EmployeeID:</label>
                    <InputNumber id="employeeid" @bind-Value="Order.EmployeeID" class="form-control" />
                    <ValidationMessage For="() => Order.EmployeeID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="orderdate" class="form-label">OrderDate:</label>
                    <InputDate id="orderdate" @bind-Value="Order.OrderDate" class="form-control" />
                    <ValidationMessage For="() => Order.OrderDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="totalamount" class="form-label">TotalAmount:</label>
                    <InputNumber id="totalamount" @bind-Value="Order.TotalAmount" class="form-control" />
                    <ValidationMessage For="() => Order.TotalAmount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastmodified" class="form-label">LastModified:</label>
                    <InputDate id="lastmodified" @bind-Value="Order.LastModified" class="form-control" />
                    <ValidationMessage For="() => Order.LastModified" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/orders">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int OrderID { get; set; }

    [SupplyParameterFromForm]
    private Order? Order { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Order ??= await context.Orders.FirstOrDefaultAsync(m => m.OrderID == OrderID);

        if (Order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateOrder()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Order!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!OrderExists(Order!.OrderID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/orders");
    }

    private bool OrderExists(int orderid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Orders.Any(e => e.OrderID == orderid);
    }
}
